openapi: 3.0.0
info:
  title: MktplaceApp APIs
  version: 1.0.0
  description: APIs for the marketplace application for buying and selling gaming assets

servers:
  - url: http://localhost:8080/api/v1

paths:
  /users/{userId}:
    get:
      operationId: getUserById
      summary: Get user details by Id
      tags:
        - User
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: String
          description: ID of the user to retrieve
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
        '500':
          description: Internal server error

  /users:
    post:
      operationId: createUser
      summary: Create a new user
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreationRequest'
      responses:
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreationResponse'
        '500':
          description: Internal server error

  /items:
    get:
      summary: Get all items
      responses:
        '200':
          description: A list of items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'

    post:
      summary: Create a new item
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        '201':
          description: Item created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'

  /transactions:
    get:
      summary: Get all transactions
      responses:
        '200':
          description: A list of transactions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'

    post:
      summary: Create a new transaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
      responses:
        '201':
          description: Transaction created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'

components:
  schemas:
    UserCreationRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 1
          maxLength: 50
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
          maxLength: 20
          pattern: "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$"
      required:
        - username
        - email
        - password

    UserCreationResponse:
      type: object
      properties:
        status:
          type: string
          enum:
            - success
            - failure
        user:
          $ref: '#/components/schemas/User'
          description: The created user object

    User:
      type: object
      properties:
        id:
          type: String
          minLength: 1
          maxLength: 50
        username:
          type: string
          minLength: 1  # Minimum length of username
          maxLength: 50 # Maximum length of username
        email:
          type: string
          format: email  # Format validation for email
        password:
          type: string
          format: password
          readOnly: true
          minLength: 8   # Minimum length of password
          maxLength: 20  # Maximum length of password
          pattern: "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$"  # Password pattern (at least one lowercase, one uppercase, one digit)
        createdAt:
          type: integer
          format: int64
        updatedAt:
          type: integer
          format: int64

    Item:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        price:
          type: number
          format: double
        quantity:
          type: integer
        sellerId:
          type: integer
          format: int64
        createdAt:
          type: integer
          format: int64
        updatedAt:
          type: integer
          format: int64

    Transaction:
      type: object
      properties:
        id:
          type: integer
          format: int64
        buyerId:
          type: integer
          format: int64
        itemId:
          type: integer
          format: int64
        price:
          type: number
          format: double
        transactionDate:
          type: integer
          format: int64
