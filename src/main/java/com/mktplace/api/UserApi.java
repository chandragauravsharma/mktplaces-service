/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.mktplace.api;

import com.mktplace.model.Booking;
import com.mktplace.model.Product;
import com.mktplace.model.User;
import com.mktplace.model.UserCreationRequest;
import com.mktplace.model.UserCreationResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import org.springframework.http.codec.multipart.Part;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "User", description = "the User API")
public interface UserApi {

    default UserApiDelegate getDelegate() {
        return new UserApiDelegate() {};
    }

    /**
     * POST /users : Create a new user
     *
     * @param userCreationRequest  (required)
     * @return User created successfully (status code 200)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "createUser",
        summary = "Create a new user",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User created successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserCreationResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default Mono<ResponseEntity<UserCreationResponse>> createUser(
        @Parameter(name = "UserCreationRequest", description = "", required = true) @Valid @RequestBody Mono<UserCreationRequest> userCreationRequest,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().createUser(userCreationRequest, exchange);
    }


    /**
     * GET /users/{userId}/bookings : Get all bookings done by a user / all products bought by a user
     *
     * @param userId ID of the user to retrieve bookings for (required)
     * @return Booking details (status code 200)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getAllBookingsByUser",
        summary = "Get all bookings done by a user / all products bought by a user",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Booking details", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Booking.class)))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/{userId}/bookings",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<Flux<Booking>>> getAllBookingsByUser(
        @Parameter(name = "userId", description = "ID of the user to retrieve bookings for", required = true, in = ParameterIn.PATH) @PathVariable("userId") Long userId,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().getAllBookingsByUser(userId, exchange);
    }


    /**
     * GET /users/{userId}/products : Get all products listed by a user
     *
     * @param userId ID of the user to retrieve product listings for (required)
     * @return Product details (status code 200)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getAllProductsListedByUser",
        summary = "Get all products listed by a user",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Product details", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Product.class)))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/{userId}/products",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<Flux<Product>>> getAllProductsListedByUser(
        @Parameter(name = "userId", description = "ID of the user to retrieve product listings for", required = true, in = ParameterIn.PATH) @PathVariable("userId") Long userId,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().getAllProductsListedByUser(userId, exchange);
    }


    /**
     * GET /users/{userId} : Get user details by Id
     *
     * @param userId ID of the user to retrieve (required)
     * @return User details (status code 200)
     *         or User not found (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getUserById",
        summary = "Get user details by Id",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            }),
            @ApiResponse(responseCode = "404", description = "User not found"),
            @ApiResponse(responseCode = "500", description = "Internal server error")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/{userId}",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<User>> getUserById(
        @Parameter(name = "userId", description = "ID of the user to retrieve", required = true, in = ParameterIn.PATH) @PathVariable("userId") Long userId,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().getUserById(userId, exchange);
    }

}
